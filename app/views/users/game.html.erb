<!DOCTYPE html>
<html>
<head>
  <link rel='stylesheet' type='text/css' href='custom.css.scss'/>
</head>
  
  <body> 
    <input type="button" name="button1" value="Done" style="position: absolute; left: 650px; top: 300px; width: 200px; " onclick="done()" />
    <%=image_tag("clockwise90.png", :id => "pic", class: "smiley", alt:"smiley") %>
    <div id="Inst"></div>
    <script type="text/javascript">
      //the start time of the page
      var start = new Date().getTime(); 
      //the time elapsed since page started 
      var elapsed = '0.0';

      


      var speedup = '<%=@user.speedup%>';
      var correctRow = '<%=@user.corrRow%>';
      var gridS = '<%=@user.gridSize%>';
      var levelNum = '<%=@user.levelNum%>';
      var levelType = 0;
      var attempts = 0; 
      var levelInformation = '';
      var correct = 50; 
      var group = '<%=@user.group%>';
      var groupOne = [0,1,2,3];
      var groupTwo = [0,1,2,3];

      /* function to make the clickable grid and to determine what happens when the block is clicked */
      var grid = clickableGrid(gridS,gridS,function(el,row,col,i){
      if(el.className == '' || el.className == 'unclicked'){
       el.className='clicked';
       player[row][col] = 1; 
        }
      else{
        el.className ='unclicked';
        player[row][col] = 0;
      }
      });
      /*mkaes the given grid*/
      var grid1 = staticGrid(gridS,gridS,function(el,row,col,i){

      });


      /*adds the grids to the page*/
      document.body.appendChild(grid);
      document.body.appendChild(grid1);
      
      /*generates the instructions*/
      var instr = instructions();
      //creates the generated grid 
      var generatedGrid = gridMaker(levelType,gridS);
      /*call to convert double array to single array*/
      var newar = convert(generatedGrid);
      /*fills squares based on grid generated into an array*/
      var filled = fill(newar);
      //creates an empty grid to hold the players data
      var player = initialize(gridS);
      //gets the solved grid for the puzzle
      var solved = solver(gridS, instr, generatedGrid);
      //writes the instructions to the screen 
      var displayInstr = writeInstr();
      //draws smiley
      var draw = drawSmiley();

     //function that writes instructions to the screen dynamically 
     function writeInstr(){
      var t =document.getElementById("Inst").innerHTML = instr;
     }

     function drawSmiley(){
      if((instr[0]== "Clockwise" && instr[1] == "90")||(instr[0]== "Counter-Clockwise"&& instr[1] == "270")){
          var t = document.getElementById("pic").src = "assets/clockwise90.png";}
      else if((instr[0]== "Clockwise"&& instr[1] == 180)||(instr[0]== "Counter-Clockwise"&& instr[1] == "180")){
          var t = document.getElementById("pic").src = "assets/180degrees.png";

      }
      else if((instr[0]== "Clockwise"&& instr[1] == "270")||(instr[0]== "Counter-Clockwise"&& instr[1] == "90")){
          var t = document.getElementById("pic").src = "assets/counterclockwise90.png";

      }

     }

    /*called when user clicks the button*/
    function done(){
      //determines if the players grid and solved grid are the same 
      var temp = arraysIdentical(gridS,solved,player); 
      var timer = getInterval();
      if(temp){
        if(speedup==1){
          levelType++;
          gridS++;
        } 
        if(correctRow==4){
          correctRow = 0;
          levelType++;
        }
        var emp = empty(18);
        player = initialize(gridS);
        document.body.removeChild(grid);
        document.body.removeChild(grid1);
        grid1 = staticGrid(gridS,gridS,function(el,row,col,i){
          });
        grid = clickableGrid(gridS,gridS,function(el,row,col,i){
        if(el.className == '' || el.className == 'unclicked'){
        el.className='clicked';
          player[row][col] = 1; 
         }
        else{
          el.className ='unclicked';
          player[row][col] = 0; 
        }
        });
        document.body.appendChild(grid);
        document.body.appendChild(grid1);
        instr = instructions();
        generatedGrid = gridMaker(levelType, gridS);
        /*call to convert double array to single array*/
        newar = convert(generatedGrid);
        /*fills squares based on grid generated into an array*/
        filled = fill(newar);
        solved = solver(gridS, instr, generatedGrid);
        displayInstr = writeInstr();
        draw = drawSmiley();
        correctRow += 1;
        //gets variables ready to be passed to a ruby call
        //var tests = update(speedup, correctRow, gridS, levelNum, levelType,attempts, levelInformation, totalCorrect);

        //Calls the controller to update the database variables 
        var test = 'add_info(:speed=>"speedup_field", :correctRow=>"correctRow_field", :grid=>"gridS_field", :level=>"levelNum_field", :type => "levelType_field", :total=>"attempts_field", :levelInfo=>"levelInformation_field", :correct=>"totalCorrect_field")';
      }
    
    else{
      speedup = 0;
      correctRow = 0;
        //gets variables ready to be passed to a ruby call
        //var tests = update(speedup, correctRow, gridS, levelNum, levelType,attempts, levelInformation, totalCorrect);
       /* jQuery.ajax({
           data: 'totalCorrect=' + totalCorrect,
           dataType: 'script',
           type: 'post',
           url: "/controller/add_info"
        });*/
        //Calls the controller to update the database variables 
        var h = '$("#totalCorrect_field").val(correct)';
        var test = 'add_info(:speed=>"#speedup_field", :correctRow=>"#correctRow_field", :grid=>"#gridS_field", :level=>"#levelNum_field", :type => "#levelType_field", :total=>"#attempts_field", :levelInfo=>"#levelInformation_field", :correct=>"#totalCorrect_field")';
         var testTemp = '<%=@user.totalCorrect%>';
         alert("Not quite. Try again!");
    }
}
  
  //function that updates the database
  function update(speedup, correctRow,gridS, levelNum, levelType,attempt,levelInformation,totalCorrect){
   $(document).ready(function(speedup, correctRow,gridS, levelNum, levelType,attempt,levelInformation,totalCorrect){
        var a = $("#speedup_field").val(speedup);
        var b = $("#correctRow_field").val(correctRow);
        var c = $("#gridS_field").val(gridS);
        var d = $("#levelNum_field").val(levelNum);
        var e = $("#levelType_field").val(levelType);
        var f = $("#attempts_field").val(attempt);
        var g = $("#levelInformation_field").val(levelInformation);
        var h = $("#totalCorrect_field").val(totalCorrect);
   });

  }

  //gets the next type of level
  function levelType(group){
    var type = levelType % 4; //should be 8 when all level types finished
    if(group  == 0){
      return groupOne[type];
    }
    else{
      return groupTwo[type];
    }
    return -1; 
  }
  
  /*function that can compare two double arrays */
  function arraysIdentical(size, a, b) {
    var i = 0;
    var j = 0;
    for(i; i<size; i++){
      for(j; j<size; j++){
        if(a[i][j]!=b[i][j]){
          return false;
        }
      }
    }
    return true;
    }

  /*function that getsNewTime */
  function getInterval()
  {
    var time= new Date().getTime()-start;
    elapsed = Math.floor(time/100)/10;
  }

     /* function that builds the clickable grid*/
  function clickableGrid( rows, cols, callback ){
      var i=0;
      var grid = document.createElement('table');
      grid.className = 'grid';
      for (var r=0;r<rows;++r){
        var tr = grid.appendChild(document.createElement('tr'));
        for (var c=0;c<cols;++c){
          var cell = tr.appendChild(document.createElement('td'));
          cell.addEventListener('click',(function(el,r,c,i){
          return function(){
              callback(el,r,c,i);
              }
          })(cell,r,c,i),false);
         }
       }
       return grid;
   }



      /*fucntion that builds given grid*/
     function staticGrid( rows, cols, callback ){
        var i=0;
        var grid = document.createElement('table');
        grid.className = 'grid1';
        for (var r=0;r<rows;++r){
          var tr = grid.appendChild(document.createElement('tr'));
          for (var c=0;c<cols;++c){
              var cell = tr.appendChild(document.createElement('td'));            
            cell.addEventListener('click',(function(el,r,c,i){
              return function(){
                callback(el,r,c,i);
                }
            })(cell,r,c,i),false);
          }
        }
        return grid;
      }

      /*fucntion that fills in the squares of the given grid*/
      function fill(fill){
        var td = document.getElementsByTagName("td");
        var size = fill.length;
        var i = 0, tds = td.length;
        for(i; i<size; i++){
          if(fill[i] == 1){
            td[tds-size+i].setAttribute("style","background:green;");
        }
      }
    }
      /*function that clears grids*/
      function empty(size){
        var td = document.getElementsByTagName("td");
        var i = 0, tds = td.length;
        for(i; i<tds; i++){
            td[i].setAttribute("style","background:white;");

          
        }
      }

      /*function that converts a 2-d array to a single array*/
      function convert(doubleArray){
      return doubleArray.join().split(",");
      }
   
    /*function that solves the level*/
      function solver(rows, instruction, givenSquare){
        var solvedSquare = initialize(rows);
        if((instruction[0]== "Clockwise" && instruction[1] == "90")||(instruction[0]== "Counter-Clockwise"&& instruction[1] == "270")){
       for(var i = 0; i<rows; i++){
        for(var j = 0; j<rows; j++){
            
          solvedSquare[j][rows-1-i] = givenSquare[i][j];
        }}}
      else if((instruction[0]== "Clockwise"&& instruction[1] == 180)||(instruction[0]== "Counter-Clockwise"&& instruction[1] == "180")){
      for(var i = 0; i<rows; i++){
        for(var j = 0; j<rows; j++){
          solvedSquare[rows-1-i][rows-1-j] = givenSquare[i][j];
          
        }}}
      else if((instruction[0]== "Clockwise"&& instruction[1] == "270")||(instruction[0]== "Counter-Clockwise"&& instruction[1] == "90")){
      for(var i = 0; i<rows; i++){
        for(var j = 0; j<rows; j++){
          solvedSquare[rows-1-j][i] = givenSquare[i][j];
        }}}
      return solvedSquare;
    }

    //returns an array of instruction 
   function initialize(gridsize)
  { 
  //alert("In initialize");
  var result = new Array();
  for (var i = 0; i <gridsize; i++) 
  {
    result[i]=new Array();
    for (var j = 0; j <gridsize; j++) 
    {     
      result[i][j]=0; 
    }//end inner for loop
  }//end outer for loop
  //alert("done initialising");
  //alert(result);
  return result;
}

function instructions(){
      var rotation = ["Clockwise", "Counter-Clockwise"];
      var degree = ["90","180","270"];
      var randomRotation= Math.floor(Math.random()*2);//0-1
      var randomDegree = Math.floor(Math.random()*3);//0-2
      var instruction = new Array();
      instruction[0] = rotation[randomRotation];
      instruction[1] = degree[randomDegree];
      return instruction;
      }

function gridMaker(shapetype, gridsize)
{
  //0=block, 1=sides, 2=corners, 3=cornerSides, 4=sepSides, 5=sepCorners, 6=sepMixed, 7=islands 
  var grid;
  switch(shapetype)
  {
    case 0:
      grid=block(gridsize);
      break;
    case 1:
       grid=sides(gridsize);
      break;
    case 2:
      grid=corners(gridsize);
      break;
    case 3:
      grid=cornerSides(gridsize);
      break;
    /*case 4:
      grid=sepSides(gridsize);
      break;
    case 5:
      grid=sepCorners(gridsize);
      break;
    case 6:
      grid=sepMixed(gridsize);
      break;
    case 7:
      grid=islands(gridsize);
      break;*/
    default:
      console.log("this should never happen");
      grid=-1;
  }
  return grid;
}//end gridmaker


function block(gridsize)
{
  var result = new Array();
  var row=Math.floor(Math.random()*2);//0-1
  var rowNumber = Math.floor(Math.random()*gridsize);//0-(gridsize-1)
  for (var i = 0; i <gridsize; i++) 
  {
    result[i]=new Array();
    for (var j = 0; j <gridsize; j++) 
    {     
      if(row==1)//row not column
      {
        if(j==rowNumber)
          { result[i][j]=1; } 
        else
          { result[i][j]=0; }       
      }//end row
      else//column
      {
        if(i==rowNumber)
        { result[i][j]=1; }
        else
        { result[i][j]=0; }
      }//end column
    }//end inner for loop
  }//end outer for loop
  return result;
}//end blocks

function getSideNeighbors(i,j,grid,gridsize,iarr,jarr)//WIP Totally check [i][j+1]; [i],[j-1]; [i-1][j]; [i+1][j]
{
  //push shoves things onto the end and returns the length
  var pushCounter=0;
  if(i>0 && grid[i-1][j]===0)
  {
    iarr.push(i-1);
    jarr.push(j);
    console.log("SideNeighbors: pushing %i ,%i onto neighbors",i-1,j);
    pushCounter++;
  }
  if(j>0 && grid[i][j-1]===0)
  {
    iarr.push(i);
    jarr.push(j-1);
    console.log("SideNeighbors: pushing %i ,%i onto neighbors",i,j-1);
    pushCounter++;
  } 
  if(i<gridsize-1 && grid[i+1][j]===0)
  {
    iarr.push(i+1);
    jarr.push(j);
    console.log("SideNeighbors: pushing %i ,%i onto neighbors",i+1,j);
    pushCounter++;
  }
  if(j<gridsize-1 && grid[i][j+1]===0)
  {
    iarr.push(i);
    jarr.push(j+1);
    console.log("SideNeighbors: pushing %i ,%i onto neighbors",i,j+1);
    pushCounter++;
  }
  //to return things just shove j on the back of i, we will always get an even number, 0 pairs with array.length/2, add up
  console.log("done getting all %i SideNeighbors of %i , %i",pushCounter,i,j);
  return pushCounter;
}

function sides(gridsize)//error not gettin all always 4?
{
  var result = initialize(gridsize);
  var filledSquares=Math.floor(gridsize*gridsize/3)-1;//30% rounded down -first point
  var i = Math.floor(Math.random()*gridsize);//0-(gridsize-1)
  var j = Math.floor(Math.random()*gridsize);//0-(gridsize-1)
    result[i][j]=1;
  console.log("sides: original seed: %i , %i",i,j);
  var iarr=new Array();
  var jarr=new Array();
  getSideNeighbors(i,j,result,gridsize,iarr,jarr);
  while(filledSquares>=0)
    {
      var randomNeighbor=Math.floor(Math.random()*iarr.length);
      result[ iarr[randomNeighbor] ][ jarr[randomNeighbor] ]=1;//setting randomly picked neighbor to 1
      console.log("%i left to fill, filling %i ,%i",filledSquares,iarr[randomNeighbor],jarr[randomNeighbor]);
      //I dont think we will ever run out of available neighborsToSplit
      //getting all neighbors
      getSideNeighbors(iarr[randomNeighbor],jarr[randomNeighbor],result,gridsize,iarr,jarr);
      //now to split them up and add them to our current iarr and jnieghbors (at end)
      //filling square
      console.log("printing neighbors");
      console.log(iarr);
      console.log(jarr);
      //now to remove extras
      i=iarr.pop();
      j=jarr.pop();
      if(randomNeighbor!==iarr[iarr.length-1])//we picked didnt pick the last one so have holes to fill;
      {
        iarr[randomNeighbor]=i;
        jarr[randomNeighbor]=j;
      }
      filledSquares--;
    }
  return result;
}//end sides

function getCornerNeighbors(i,j,grid,gridsize,iarr,jarr)//WIP Totally check [i+1][j+1]; [i-1],[j-1]; [i-1][j+1]; [i+1][j-1]
{
  //push shoves things onto the end and returns the length
  var pushCounter=0;
  if(i>0 && j>0 && grid[i-1][j-1]===0)
  {
    iarr.push(i-1);
    jarr.push(j-1);
    console.log("CornerNeighbors: pushing %i ,%i onto neighbors",i-1,j-1);
    pushCounter++;
  }
  if(j>0 && i<gridsize-1 && grid[i][j-1]===0)
  {
    iarr.push(i+1);
    jarr.push(j-1);
    console.log("CornerNeighbors: pushing %i ,%i onto neighbors",i+1,j-1);
    pushCounter++;
  } 
  if(i<gridsize-1 && j<gridsize-1 && grid[i+1][j]===0)
  {
    iarr.push(i+1);
    jarr.push(j+1);
    console.log("CornerNeighbors: pushing %i ,%i onto neighbors",i+1,j+1);
    pushCounter++;
  }
  if(j<gridsize-1 && i>0 && grid[i][j+1]===0)
  {
    iarr.push(i-1);
    jarr.push(j+1);
    console.log("CornerNeighbors: pushing %i ,%i onto neighbors",i-1,j+1);
    pushCounter++;
  }
  //to return things just shove j on the back of i, we will always get an even number, 0 pairs with array.length/2, add up
  console.log("done getting all %i CornerNeighbors of %i , %i",pushCounter,i,j);
  return pushCounter;
}


function corners(gridsize)//error not gettin all always 4?
{
  var result = initialize(gridsize);
  var filledSquares=Math.floor(gridsize*gridsize/3)-1;//30% rounded down -first point
  var i = Math.floor(Math.random()*gridsize);//0-(gridsize-1)
  var j = Math.floor(Math.random()*gridsize);//0-(gridsize-1)
    result[i][j]=1;
  console.log("corners: original seed: %i , %i",i,j);
  var iarr=new Array();
  var jarr=new Array();
  getCornerNeighbors(i,j,result,gridsize,iarr,jarr);
  while(filledSquares>=0)
    {
      var randomNeighbor=Math.floor(Math.random()*iarr.length);
      result[ iarr[randomNeighbor] ][ jarr[randomNeighbor] ]=1;//setting randomly picked neighbor to 1
      console.log("%i left to fill, filling %i ,%i",filledSquares,iarr[randomNeighbor],jarr[randomNeighbor]);
      //I dont think we will ever run out of available neighborsToSplit
      //getting all neighbors
      getCornerNeighbors(iarr[randomNeighbor],jarr[randomNeighbor],result,gridsize,iarr,jarr);
      //now to split them up and add them to our current iarr and jnieghbors (at end)
      //filling square
      console.log("printing neighbors");
      console.log(iarr);
      console.log(jarr);
      //now to remove extras
      i=iarr.pop();
      j=jarr.pop();
      if(randomNeighbor!==iarr[iarr.length-1])//we picked didnt pick the last one so have holes to fill;
      {
        iarr[randomNeighbor]=i;
        jarr[randomNeighbor]=j;
      }
      filledSquares--;
    }
  return result;
}//end corners

function cornerSides(gridsize)
{
  var result = initialize(gridsize);
  var filledSquares=Math.floor(gridsize*gridsize/3)-1;//30% rounded down -first point
  var i = Math.floor(Math.random()*gridsize);//0-(gridsize-1)
  var j = Math.floor(Math.random()*gridsize);//0-(gridsize-1)
    result[i][j]=1;
  console.log("corners: original seed: %i , %i",i,j);
  var iarr=new Array();
  var jarr=new Array();
  getCornerNeighbors(i,j,result,gridsize,iarr,jarr);
  getSideNeighbors(i,j,result,gridsize,iarr,jarr);
  while(filledSquares>=0)
    {
      var randomNeighbor=Math.floor(Math.random()*iarr.length);
      result[ iarr[randomNeighbor] ][ jarr[randomNeighbor] ]=1;//setting randomly picked neighbor to 1
      console.log("%i left to fill, filling %i ,%i",filledSquares,iarr[randomNeighbor],jarr[randomNeighbor]);
      //I dont think we will ever run out of available neighborsToSplit
      //getting all neighbors
      getCornerNeighbors(iarr[randomNeighbor],jarr[randomNeighbor],result,gridsize,iarr,jarr);
      getSideNeighbors(iarr[randomNeighbor],jarr[randomNeighbor],result,gridsize,iarr,jarr);
      //now to split them up and add them to our current iarr and jnieghbors (at end)
      //filling square
      console.log("printing neighbors");
      console.log(iarr);
      console.log(jarr);
      //now to remove extras
      i=iarr.pop();
      j=jarr.pop();
      if(randomNeighbor!==iarr[iarr.length-1])//we picked didnt pick the last one so have holes to fill;
      {
        iarr[randomNeighbor]=i;
        jarr[randomNeighbor]=j;
      }
      filledSquares--;
    }
  return result;
}//end sides

     
    </script>
    
     </body>
     </html>