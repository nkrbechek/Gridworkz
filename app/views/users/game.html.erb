<!DOCTYPE html>
<html>
<head>
  <link rel='stylesheet' type='text/css' href='custom.css.scss'/>
</head>
  <h1>
<script>
 // var test = '<%=@user.gridSize%>';
  //document.write(test);
</script>
  <%=image_tag("clockwise90.png", class: "smiley", alt:"smiley") %>
</h1>
  <body> 
    <input type="button" name="button1" value="Done" style="position: absolute; left: 650px; top: 300px; width: 200px; " onclick="done()" />
    <script type="text/javascript">
    
    //var initialTime=getTime();
     
      var speedup = '<%=@user.speedup%>';
      var correctRow = '<%=@user.corrRow%>';
      var gridS = '<%=@user.gridSize%>';
      /* function to make the clickable grid and to determine what happens when the block is clicked */
      var grid = clickableGrid(gridS,gridS,function(el,row,col,i){
      if(el.className == '' || el.className == 'unclicked'){
       el.className='clicked';
       player[row][col] = 1; 
        }
      else{
        el.className ='unclicked';
        player[row][col] = 0;
      }
      });
      /*mkaes the given grid*/
      var grid1 = staticGrid(gridS,gridS,function(el,row,col,i){

      });


      /*adds the grids to the page*/
      document.body.appendChild(grid);
      document.body.appendChild(grid1);
      
      var player = initialize(gridS);
      var instr = instructions();
      instr[0] = instr[0].fontsize(5);
      instr[1] = instr[1].fontsize(5);
      document.write(instr[0].bold() +"   "+ instr[1].bold());
      var da = block(gridS);
      /*call to convert double array to single array*/
      var newar = convert(da);
      /*fills squares based on grid generated into an array*/
      var filled = fill(newar);
      
      var solved = solver(gridS, instr, da);
      
    /*called when user clicks the button*/
    function done(){
      var temp = arraysIdentical(gridS,solved,player);
      if(temp && speedup ==1){
      	 var emp = empty(18);
      	 gridS++;
     	 player = initialize(gridS);
     	 document.body.removeChild(grid);
     	 document.body.removeChild(grid1);
     	 grid1 = staticGrid(gridS,gridS,function(el,row,col,i){

      });

      	 grid = clickableGrid(gridS,gridS,function(el,row,col,i){
     	 if(el.className == '' || el.className == 'unclicked'){
     	  el.className='clicked';
        	player[row][col] = 1; 
       	 }
     	 else{
        	el.className ='unclicked';
       	 player[row][col] = 0; 
     	 }
     	 });
       	 document.body.appendChild(grid);
     	 document.body.appendChild(grid1);
      	instr = instructions();
      	//document.write(instr[0].bold() +"   "+ instr[1].bold());
     	 da = block(gridS);
     	/*call to convert double array to single array*/
     	newar = convert(da);
     	 /*fills squares based on grid generated into an array*/
     	 filled = fill(newar);

     	 solved = solver(gridS, instr, da);
    	}
    else if(temp && speedup == 0 && correctRow>=4){
    	 var emp = empty(18);
    	 correctRow = 0;
     	 player = initialize(gridS);
     	 document.body.removeChild(grid);
     	 document.body.removeChild(grid1);
     	 grid = clickableGrid(gridS,gridS,function(el,row,col,i){
     	 if(el.className == '' || el.className == 'unclicked'){
     	  el.className='clicked';
        	player[row][col] = 1; 
       	 }
     	 else{
        	el.className ='unclicked';
       	 player[row][col] = 0; 
     	 }
     	 });
     	 document.body.appendChild(grid);
     	 document.body.appendChild(grid1);
      	instr = instructions();
      	//document.write(instr[0].bold() +"   "+ instr[1].bold());
     	 da = block(gridS);
     	/*call to convert double array to single array*/
     	newar = convert(da);
     	 /*fills squares based on grid generated into an array*/
     	 filled = fill(newar);

     	 solved = solver(gridS, instr, da);
    }
    else if(temp && correctRow<4){
 	     var emp = empty(18);
 	     correctRow++;
     	 player = initialize(gridS);
     	 document.body.removeChild(grid);
     	 document.body.removeChild(grid1);
     	 grid = clickableGrid(gridS,gridS,function(el,row,col,i){
     	 if(el.className == '' || el.className == 'unclicked'){
     	  el.className='clicked';
        	player[row][col] = 1; 
       	 }
     	 else{
        	el.className ='unclicked';
       	 player[row][col] = 0; 
     	 }
     	 });
     	 document.body.appendChild(grid);
     	 document.body.appendChild(grid1);
      	instr = instructions();
      	//document.write(instr[0].bold() +"   "+ instr[1].bold());
     	 da = block(gridS);
     	/*call to convert double array to single array*/
     	newar = convert(da);
     	 /*fills squares based on grid generated into an array*/
     	 filled = fill(newar);

     	 solved = solver(gridS, instr, da);
    }
    else{
        alert("Not quite. Try again!");
    }
  
  
}
  /*function that can compare two double arrays */
  function arraysIdentical(size, a, b) {
    var i = 0;
    var j = 0;
    for(i; i<size; i++){
      for(j; j<size; j++){
        if(a[i][j]!=b[i][j]){
          return false;
        }
      }
    }
    return true;
    }

  /*function that getsNewTime */
  function getInterval(oldtime)
  {
    var time=getTime();
    return time-oldtime;
  }

     /* function that builds the clickable grid*/
  function clickableGrid( rows, cols, callback ){
      var i=0;
      var grid = document.createElement('table');
      grid.className = 'grid';
      for (var r=0;r<rows;++r){
        var tr = grid.appendChild(document.createElement('tr'));
        for (var c=0;c<cols;++c){
          var cell = tr.appendChild(document.createElement('td'));
          cell.addEventListener('click',(function(el,r,c,i){
          return function(){
              callback(el,r,c,i);
              }
          })(cell,r,c,i),false);
         }
       }
       return grid;
   }



      /*fucntion that builds given grid*/
     function staticGrid( rows, cols, callback ){
        var i=0;
        var grid = document.createElement('table');
        grid.className = 'grid1';
        for (var r=0;r<rows;++r){
          var tr = grid.appendChild(document.createElement('tr'));
          for (var c=0;c<cols;++c){
              var cell = tr.appendChild(document.createElement('td'));            
            cell.addEventListener('click',(function(el,r,c,i){
              return function(){
                callback(el,r,c,i);
                }
            })(cell,r,c,i),false);
          }
        }
        return grid;
      }

      /*fucntion that fills in the squares of the given grid*/
      function fill(fill){
        var td = document.getElementsByTagName("td");
        var size = fill.length;
        var i = 0, tds = td.length;
        for(i; i<size; i++){
          if(fill[i] == 1){
            td[tds-size+i].setAttribute("style","background:green;");
        }
      }
    }
      /*function that clears grids*/
      function empty(size){
        var td = document.getElementsByTagName("td");
        var i = 0, tds = td.length;
        for(i; i<tds; i++){
            td[i].setAttribute("style","background:white;");

          
        }
      }

      /*function that converts a 2-d array to a single array*/
      function convert(doubleArray){
    	return doubleArray.join().split(",");
      }
   
    /*function that solves the level*/
      function solver(rows, instruction, givenSquare){
        var solvedSquare = initialize(rows);
        if((instruction[0]== "Clockwise" && instruction[1] == "90")||(instruction[0]== "Counter-Clockwise"&& instruction[1] == "270")){
       for(var i = 0; i<rows; i++){
        for(var j = 0; j<rows; j++){
            
          solvedSquare[j][rows-1-i] = givenSquare[i][j];
        }}}
      else if((instruction[0]== "Clockwise"&& instruction[1] == 180)||(instruction[0]== "Counter-Clockwise"&& instruction[1] == "180")){
      for(var i = 0; i<rows; i++){
        for(var j = 0; j<rows; j++){
          solvedSquare[rows-1-i][rows-1-j] = givenSquare[i][j];
          
        }}}
      else if((instruction[0]== "Clockwise"&& instruction[1] == "270")||(instruction[0]== "Counter-Clockwise"&& instruction[1] == "90")){
      for(var i = 0; i<rows; i++){
        for(var j = 0; j<rows; j++){
          solvedSquare[rows-1-j][i] = givenSquare[i][j];
        }}}
      return solvedSquare;
    }

    //returns an array of instruction 
   function initialize(gridsize)
	{ 
  //alert("In initialize");
  var result = new Array();
  for (var i = 0; i <gridsize; i++) 
  {
    result[i]=new Array();
    for (var j = 0; j <gridsize; j++) 
    {     
      result[i][j]=0; 
    }//end inner for loop
  }//end outer for loop
  //alert("done initialising");
  //alert(result);
  return result;
}

function instructions(){
    	var rotation = ["Clockwise", "Counter-Clockwise"];
    	var degree = ["90","180","270"];
    	var randomRotation= Math.floor(Math.random()*2);//0-1
    	var randomDegree = Math.floor(Math.random()*3);//0-2
    	var instruction = new Array();
    	instruction[0] = rotation[randomRotation];
    	instruction[1] = degree[randomDegree];
    	return instruction;
   	  }

function block(gridsize)
  {
    var result = new Array();
    var row=Math.floor(Math.random()*2);//0-1
    var rowNumber = Math.floor(Math.random()*gridsize);//0-(gridsize-1)
    for (var i = 0; i <gridsize; i++) 
    {
      result[i]=new Array();
      for (var j = 0; j <gridsize; j++) 
      {     
        if(row==1)//row not column
        {
          if(j==rowNumber)
            { result[i][j]=1; } 
          else
            { result[i][j]=0; }       
        }//end row
        else//column
        {
          if(i==rowNumber)
          { result[i][j]=1; }
          else
          { result[i][j]=0; }
        }//end column
      }//end inner for loop
    }//end outer for loop
    return result;
  }
     
    </script>
    
     </body>
     </html>